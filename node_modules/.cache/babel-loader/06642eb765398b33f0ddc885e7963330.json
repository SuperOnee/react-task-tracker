{"ast":null,"code":"var _jsxFileName = \"/Users/spongebob/Desktop/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport React from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask'; // function render\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  useEffect(() => {\n    console.log('useEffect function');\n  }, []);\n  const [tasks, setTasks] = useState([]);\n  const [showAddTask, setShowAddTask] = useState(false); // Add Task\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 100000000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    console.log(newTask);\n    setTasks([...tasks, newTask]);\n  }; // Delete Task\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; // On Toggle\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : 'No task to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"N2M7d2VPe4F1+MCkeaptRDFC7JY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/spongebob/Desktop/react-task-tracker/src/App.js"],"names":["useState","useEffect","React","Header","Tasks","AddTask","App","console","log","tasks","setTasks","showAddTask","setShowAddTask","addTask","task","id","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAEA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChBL,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C,CAPgB,CAShB;;AACA,QAAMa,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,SAA3B,IAAwC,CAAnD;AACA,UAAMC,OAAO,GAAG;AAAEJ,MAAAA,EAAF;AAAM,SAAGD;AAAT,KAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;AACAT,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWU,OAAX,CAAD,CAAR;AACD,GALD,CAVgB,CAiBhB;;;AACA,QAAMC,UAAU,GAAIL,EAAD,IAAQ;AACzBL,IAAAA,QAAQ,CAACD,KAAK,CAACY,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD,CAlBgB,CAsBhB;;;AACA,QAAMO,cAAc,GAAIP,EAAD,IAAQ;AAC7BL,IAAAA,QAAQ,CACND,KAAK,CAACc,GAAN,CAAWT,IAAD,IACRA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGD,IAAL;AAAWU,MAAAA,QAAQ,EAAE,CAACV,IAAI,CAACU;AAA3B,KAAjB,GAAyDV,IAD3D,CADM,CAAR;AAKD,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAE,MAAMF,cAAc,CAAC,CAACD,WAAF,CAD7B;AAEE,MAAA,OAAO,EAAEA;AAFX;AAAA;AAAA;AAAA;AAAA,YADF,EAKGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA,YALlB,EAMGJ,KAAK,CAACgB,MAAN,GAAe,CAAf,gBACC,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEhB,KAAd;AAAqB,MAAA,QAAQ,EAAEW,UAA/B;AAA2C,MAAA,QAAQ,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,YADD,GAGC,iBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA7CD;;GAAMhB,G;;KAAAA,G;AA+CN,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport React from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\n// function render\nconst App = () => {\n  useEffect(() => {\n    console.log('useEffect function')\n  }, [])\n\n  const [tasks, setTasks] = useState([])\n\n  const [showAddTask, setShowAddTask] = useState(false)\n\n  // Add Task\n  const addTask = (task) => {\n    const id = Math.floor(Math.random() * 100000000) + 1\n    const newTask = { id, ...task }\n    console.log(newTask)\n    setTasks([...tasks, newTask])\n  }\n\n  // Delete Task\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  // On Toggle\n  const toggleReminder = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: !task.reminder } : task\n      )\n    )\n  }\n\n  return (\n    <div className='container'>\n      <Header\n        onAdd={() => setShowAddTask(!showAddTask)}\n        showAdd={showAddTask}\n      />\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {tasks.length > 0 ? (\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n      ) : (\n        'No task to show'\n      )}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}